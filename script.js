// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
  initPortraitSwitcher();
  updateVisibleCards();
});

function initPortraitSwitcher() {
  const switcher = document.querySelector('.spreads-menu');
  
  if (!switcher) {
    console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  switcher.addEventListener('click', function(e) {
    const card = e.target.closest('.spread-card');
    if (!card) return;
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    document.querySelectorAll('.spread-card').forEach(c => {
      c.classList.remove('active');
    });
    card.classList.add('active');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateTitle(card.getAttribute('data-spread'));
    updateVisibleCards();
    
    // –ü–µ—Ä–µ—Å—á—ë—Ç –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤–≤–µ–¥–µ–Ω–∞
    const birthDate = document.getElementById('birthDate').value;
    if (birthDate && isValidDate(birthDate)) {
      calculatePortrait();
    }
  });
}

function updateTitle(spreadType) {
  const titles = {
    individual: 'üîÆ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏',
    shadow: 'üåë –¢–µ–Ω–µ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏', 
    karma: 'üîÑ –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏'
  };
  
  const titleElement = document.querySelector('.container h1');
  if (titleElement) {
    titleElement.textContent = titles[spreadType] || titles.individual;
  }
}

function updateVisibleCards() {
  const activeCard = document.querySelector('.spread-card.active');
  if (!activeCard) return;
  
  const positions = activeCard.getAttribute('data-positions');
  if (!positions) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞');
    return;
  }
  
  const positionsToShow = positions.split(',');
  
  // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ
  document.querySelectorAll('.card').forEach(card => {
    card.style.display = 'none';
  });
  
  // –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ
  positionsToShow.forEach(pos => {
    const cardId = `pos${pos}-card`;
    const cardElement = document.getElementById(cardId);
    
    if (cardElement) {
      cardElement.style.display = 'block';
    } else {
      console.warn(`–ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  });
}
document.addEventListener('DOMContentLoaded', async function() {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
  let arcanaData = [];
  try {
    const response = await fetch('arcana.json');
    if (!response.ok) throw new Error('Network response was not ok');
    const data = await response.json();
    arcanaData = data.arcana;
    
    if (!arcanaData || !arcanaData.length) {
      throw new Error('No arcana data loaded');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ arcana.json:', error);
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    return;
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
  let currentDay, currentMonth, currentYear;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
 function getCardMeaning(card, position, spreadType) {
  if (!card || !card.meanings) return '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
  
  const meanings = card.meanings[spreadType];
  if (!meanings) return '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
  const posKey = position.toString(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
  if (meanings[posKey] !== undefined && meanings[posKey].trim() !== '') {
    return meanings[posKey];
  }
  
  // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4.1)
  if (position.includes('.')) {
    const mainPos = position.split('.')[0];
    if (meanings[mainPos] !== undefined && meanings[mainPos].trim() !== '') {
      return meanings[mainPos];
    }
  }
  
  return meanings.default || '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
}

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  function showResult(elementId, cardNum, posNum) {
    const card = arcanaData.find(c => c.id === cardNum);
    if (!card) {
      console.error(`–ö–∞—Ä—Ç–∞ —Å id ${cardNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }
    
    const spreadType = document.querySelector('.spread-card.active')?.getAttribute('data-spread') || 'individual';
    const meaning = getCardMeaning(card, posNum, spreadType);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ 2.1 (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞)
    const displayNumber = posNum === '2.1' ? (currentMonth > 12 ? currentMonth - 12 : currentMonth) : cardNum;
    
    const html = `
      <h4>${card.name} <span class="arcana-number">${displayNumber}</span></h4>
      <p class="arcana-meaning"><strong>${meaning}</strong></p>
      ${spreadType === 'shadow' ? 
        `<p class="shadow-aspect"><em>–¢–µ–Ω–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: ${card.meanings.shadow?.default || '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}</em></p>` : ''}
    `;
    
    const element = document.getElementById(elementId);
    if (element) {
      element.innerHTML = html;
    } else {
      console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å id ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—Ä—Ç—ã (0-21)
  function calculateCard(num) {
    if (isNaN(num) || !isFinite(num)) return 0;
    let result = num % 22;
    return result === 0 ? 0 : result; // –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è –∫—Ä–∞—Ç–Ω—ã—Ö 22
  }

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
  function calculateAllPositions(day, month, year) {
    const positions = {};
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    currentDay = day;
    currentMonth = month;
    currentYear = year;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    positions[1] = calculateCard(day);
    positions[2] = calculateCard(month);
    const yearSum = String(year).split('').reduce((sum, d) => sum + Number(d), 0);
    positions[3] = calculateCard(yearSum);
    
    // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç
    positions[4] = calculateCard(positions[1] + positions[2]);
    positions[5] = calculateCard(positions[2] + positions[3]);
    positions[6] = calculateCard(positions[4] + positions[5]);
    positions[7] = calculateCard(positions[1] + positions[5]);
    positions[8] = calculateCard(positions[2] + positions[6]);
    positions[12] = calculateCard(positions[7] + positions[8]);
    positions[13] = calculateCard(positions[1] + positions[4] + positions[6]);
    positions[14] = calculateCard(positions[3] + positions[5] + positions[6]);
    
    // –¢–µ–Ω–µ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç
    positions['4.1'] = calculateCard(positions[1] * positions[2]);
    positions[22] = calculateCard(positions[1] + positions[4]);
    positions[23] = calculateCard(positions[2] + positions[4]);
    positions[24] = calculateCard(positions[2] + positions[5]);
    positions[25] = calculateCard(positions[3] + positions[5]);
    positions[26] = calculateCard(positions[4] + positions[6]);
    positions[27] = calculateCard(positions[5] + positions[6]);
    positions[28] = calculateCard(positions[24] + positions[25]);
    positions['28.1'] = calculateCard(positions[23] + positions[27]);
    positions[29] = calculateCard(positions[22] + positions[26]);
    
    // –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç
    positions['2.1'] = month > 12 ? month - 12 : month; // –î–ª—è –ø–æ–∑–∏—Ü–∏–∏ 2.1 (1-12)
    positions[9] = calculateCard(Math.abs(positions[1] - positions[2]));
    positions[10] = calculateCard(Math.abs(positions[2] - positions[3]));
    positions[11] = calculateCard(Math.abs(positions[9] - positions[10]));
    positions[15] = calculateCard(positions[9] + positions[10] + positions[11] - positions[7]);
    positions['15.1'] = calculateCard(positions[11] - positions[13]);
    positions[16] = calculateCard(positions[1] + positions[4] + positions[5] + positions[3]);
    positions[17] = calculateCard(positions[11] + positions[6]);
    positions[18] = calculateCard(positions[11] + positions[8]);
    
    return positions;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  function updateVisibleCards() {
  const activeCard = document.querySelector('.spread-card.active');
  if (!activeCard) return;
  
  const positionsToShow = activeCard.getAttribute('data-positions').split(',');
  
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  document.querySelectorAll('.card').forEach(card => {
    card.style.display = 'none';
    card.style.opacity = '0';
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  positionsToShow.forEach(pos => {
    const card = document.getElementById(`pos${pos}-card`);
    if (card) {
      card.style.display = 'block';
      setTimeout(() => {
        card.style.opacity = '1';
      }, 50);
    }
  });
}


  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–∞
  function calculatePortrait() {
    const btn = document.getElementById('calculateBtn');
    if (!btn) {
      console.error('–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    btn.classList.add('loading');
    
    setTimeout(() => {
      try {
        const dateStr = document.getElementById('birthDate').value;
        if (!dateStr) {
          alert('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è');
          return;
        }

        if (!isValidDate(dateStr)) {
          alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì');
          return;
        }

        const [day, month, year] = dateStr.split('.').map(Number);
        const positions = calculateAllPositions(day, month, year);
        const activeCard = document.querySelector('.spread-card.active');
        
        if (!activeCard) {
          console.error('–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–æ—Ä—Ç—Ä–µ—Ç–∞');
          return;
        }
        
        const positionsToShow = activeCard.getAttribute('data-positions').split(',');

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞
        positionsToShow.forEach(pos => {
          const key = pos.includes('.') ? pos : parseInt(pos);
          if (positions[key] !== undefined) {
            showResult(`pos${pos}-result`, positions[key], pos);
          } else {
            console.warn(`–ü–æ–∑–∏—Ü–∏—è ${pos} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö`);
          }
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞');
      } finally {
        btn.classList.remove('loading');
      }
    }, 800);
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
  function isValidDate(dateString) {
    const parts = dateString.split('.');
    if (parts.length !== 3) return false;
    
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10);
    const year = parseInt(parts[2], 10);
    
    if (isNaN(day) || isNaN(month) || isNaN(year)) return false;
    if (year < 1900 || year > new Date().getFullYear()) return false;
    if (month < 1 || month > 12) return false;
    
    const date = new Date(year, month - 1, day);
    return date.getDate() === day && 
           date.getMonth() === month - 1 && 
           date.getFullYear() === year;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const datePicker = flatpickr("#birthDate", {
    maxDate: "today",
    locale: "ru",
    allowInput: true,
    clickOpens: true,
    onReady: function(selectedDates, dateStr, instance) {
      instance.input.removeAttribute('readonly');
      
      instance.input.addEventListener('input', function(e) {
        let value = e.target.value.replace(/[^\d]/g, '');
        
        let formatted = '';
        for (let i = 0; i < value.length; i++) {
          if (i === 2 || i === 4) formatted += '.';
          formatted += value[i];
          if (formatted.length >= 10) break;
        }
        
        e.target.value = formatted;
        
        if (formatted.length === 10 && !isValidDate(formatted)) {
          e.target.classList.add('error');
        } else {
          e.target.classList.remove('error');
        }
      });
    }
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º–∏
  document.querySelectorAll('.spread-card').forEach(card => {
    card.addEventListener('click', function() {
      document.querySelectorAll('.spread-card').forEach(c => c.classList.remove('active'));
      this.classList.add('active');
      updateVisibleCards();
      calculatePortrait();
    });
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫
  document.querySelectorAll('.toggle-description').forEach(button => {
    button.addEventListener('click', function() {
      const card = this.closest('.card');
      if (!card) return;
      
      const description = card.querySelector('.full-description');
      if (!description) return;
      
      if (description.classList.contains('hidden')) {
        description.classList.remove('hidden');
        description.classList.add('show');
        this.textContent = '–°–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ';
      } else {
        description.classList.remove('show');
        description.classList.add('hidden');
        this.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ';
      }
    });
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
  const calculateBtn = document.getElementById('calculateBtn');
  if (calculateBtn) {
    calculateBtn.addEventListener('click', calculatePortrait);
  } else {
    console.error('–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
  const birthDateInput = document.getElementById('birthDate');
  if (birthDateInput) {
    birthDateInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        calculatePortrait();
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  updateVisibleCards();
});

// Matrix Background –∫–æ–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
document.addEventListener('DOMContentLoaded', function() {
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ (120 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
  const symbols = [
    "·ö†", "·ö¢", "·ö¶", "·ö®", "·ö±", "·ö≤", "·ö∑", "·öπ", "·ö∫", "·öª", 
    "·öæ", "·öø", "·õÅ", "·õÇ", "·õÉ", "·õá", "·õà", "·õâ", "·õä", "·õã",
    "·õå", "·õç", "·õé", "·õè", "·õê", "·õë", "·õí", "·õì", "·õî", "·õï",
    "‚òâ", "‚òø", "‚ôÄ", "‚ôÅ", "‚ôÇ", "‚ôÉ", "‚ôÑ", "‚ôÖ", "‚ôÜ", "‚ôá",
    "üúÄ", "üúÅ", "üúÇ", "üúÉ", "üúÑ", "üúÖ", "üúÜ", "üúá", "üúà", "üúâ",
    "ìÄÄ", "ìÄÅ", "ìÄÇ", "ìÄÉ", "ìÄÑ", "ìÄÖ", "ìÄÜ", "ìÄá", "ìÄà", "ìÄâ",
    "‚ò•", "ìÇÄ", "‚ò§", "‚öö", "üïâ", "‡•ê", "‚ú°", "‚òØ", "‚òÆ", "‚ò∏",
    "ÍßÅ", "ÍßÇ", "‚ú∫", "‚úπ", "‚ú∏", "‚ú∑", "‚ú∂", "‚úµ", "‚ú¥", "‚ú≥",
    "‚ú≤", "‚ú±", "‚ú∞", "‚ú¶", "‚úß", "‚ú©", "‚ú™", "‚ú´", "‚ú¨", "‚ú≠",
    "‚öï", "‚öñ", "‚öó", "‚öò", "‚öô", "‚öö", "‚öõ", "‚öú", "‚öù", "‚öû",
    "‚öü", "‚ö†", "‚ö°", "‚ö¢", "‚ö£", "‚ö§", "‚ö•", "‚ö¶", "‚öß", "‚ö®",
    "‚ö©", "‚ö™", "‚ö´", "‚ö¨", "‚ö≠", "‚öÆ", "‚öØ", "‚ö∞", "‚ö±", "‚ö≤",
    "‚ú°Ô∏è","üîÆ","üúÅ","üúÇ","üúÉ","üúÑ","üúÖ","üúÜ","üúá","üúà",
    "‚öïÔ∏è","‚öñÔ∏è","üîØ","üïâÔ∏è","‚ò•","‚ò¨","‚ò∏Ô∏è","‚òØÔ∏è","‚ò¶Ô∏è","‚úùÔ∏è",
    "‚ò™Ô∏è","‚ò´Ô∏è","‚ò¨Ô∏è",
    "‚öóÔ∏è","üî±","üî∫","üîª","üî∏","üîπ","üî∂","üî∑",
    "‚öñÔ∏è","‚öôÔ∏è","‚öîÔ∏è","‚ö∞Ô∏è","‚ö±Ô∏è","‚öñÔ∏è",
    "üïé","‚ú†","‚ú°Ô∏é ","‚ú¶ ","‚úß ","‚ú© ","‚ú™ ","‚ú´ ","‚ú¨ ","‚ú≠ ",
    "‚òÄÔ∏è ","üåô ","‚≠ê ","‚ú® ",
    "üî• ","üíß ","üåü ","üåà ","üå™Ô∏è ","üåä ","üå¨Ô∏è ",
    "üîÆ ","üìø ","üßô‚Äç‚ôÇÔ∏è ","üßô‚Äç‚ôÄÔ∏è ","üßô‚Äç‚ôÇÔ∏è‚Äç‚ôÄÔ∏è ","ìÄÄ","ìÅê","ìÇÄ","ìÉ∞","ìÑø","ìÖì",
    "·ö†", "·ö¢", "·ö¶", "·ö®", "·ö±", "·ö≤", "·ö∑", "·öπ", "·ö∫", "·öª",
    "·öæ", "·öø", "·õÅ", "·õÇ", "·õÉ", "·õá", "·õà", "·õâ", "·õä", "·õã",
    "·õå", "·õç", "·õé", "·õè", "·õê", "·õë", "·õí", "·õì", "·õî", "·õï",
    "‚òâ", "‚òø", "‚ôÄ", "‚ôÅ", "‚ôÇ", "‚ôÉ", "‚ôÑ", "‚ôÖ", "‚ôÜ", "‚ôá"
  ];

  const colors = [
    "#20c20e", "#ff0000", "#00a2ff", "#ffffff", 
    "#ffd700", "#9400d3", "#ff00ff", "#00ffff",
    "#4b0082", "#ff8c00", "#7cfc00", "#ff1493"
  ];

  const container = document.querySelector('.matrix-background');
  let symbolsCount = 0;
  const maxSymbols = 100; //–∏–∑–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤

   function createSymbol() {
  if (symbolsCount >= maxSymbols) return;
  
  const symbol = document.createElement('div');
  symbol.className = 'matrix-symbol';
  
  // –†–∞–∑–º–µ—Ä –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
  const size = Math.round((0.5 + Math.random() * 4.5) * 16);
  const opacity = 0.4 + Math.random() * 0.6;

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π (50% —Å –∫—Ä–∞—ë–≤, 50% –≤–Ω—É—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∞)
  let startX, startY;
  if (Math.random() > 0.5) {
    const edge = Math.floor(Math.random() * 4);
    const padding = 50;
    startX = edge % 2 ? 
      (edge === 1 ? window.innerWidth + padding : -padding) : 
      Math.random() * window.innerWidth;
    startY = edge % 2 ? 
      Math.random() * window.innerHeight : 
      (edge === 0 ? -padding : window.innerHeight + padding);
  } else {
    startX = Math.random() * window.innerWidth;
    startY = Math.random() * window.innerHeight;
  }

  // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
  const angle = Math.random() * Math.PI * 2;
  const distance = 200 + Math.random() * 600;
  const duration = 4 + Math.random() * 8; // 4-12 —Å–µ–∫—É–Ω–¥

  const endX = startX + Math.cos(angle) * distance;
  const endY = startY + Math.sin(angle) * distance;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
  symbol.textContent = symbols[Math.floor(Math.random() * symbols.length)];
  symbol.style.cssText = `
    --symbol-size: ${size}px;
    --start-x: ${startX}px;
    --start-y: ${startY}px;
    --end-x: ${endX}px;
    --end-y: ${endY}px;
    --start-rotation: ${(Math.random() - 0.5) * 360}deg;
    --end-rotation: ${(Math.random() - 0.5) * 360}deg;
    --max-opacity: ${opacity};
    color: ${colors[Math.floor(Math.random() * colors.length)]};
    animation-duration: ${duration}s;
  `;

  container.appendChild(symbol);
  symbolsCount++;

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å–ø–∞–≤–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  symbol.addEventListener('animationend', () => {
    symbol.remove();
    symbolsCount--;
    createSymbol(); // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª –≤–º–µ—Å—Ç–æ –∏—Å—á–µ–∑–Ω—É–≤—à–µ–≥–æ
  });
}
 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function startAnimation() {
  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
  for (let i = 0; i < 10; i++) createSymbol();
  
  // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const intervalId = setInterval(createSymbol, 30);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Å–∞–π–∑–∞
  window.addEventListener('resize', () => {
    clearInterval(intervalId);
    document.querySelectorAll('.matrix-symbol').forEach(el => el.remove());
    symbolsCount = 0;
    startAnimation();
  });
}

startAnimation();
});
